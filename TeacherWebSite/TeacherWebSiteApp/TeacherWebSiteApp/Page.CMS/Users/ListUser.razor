@page "/cms/users"
@layout CmsLayout
@inject IDbContextFactory<TeacherContext> DbFactory
@attribute [Authorize(Roles = "admin")]
@inject NavigationManager NavManager
@inject AuthenticationStateProvider provider
@using System.Text.Json;
@namespace TeacherWebSiteApp.Page.CMS.Users



<div style="margin-right: 500px">
    <h3>Пользователи</h3>
    <ValidationBlock Messages="messages" />
    <Form Model="reg"
          LabelColSpan="8"
          WrapperColSpan="16">
        <FormItem Label="Имя пользователя">
            <Input @bind-Value="@context.UserName" />
        </FormItem>
        <FormItem Label="Логин">
            <Input @bind-Value="@context.Login" />
        </FormItem>
        <FormItem Label="Password">
            <InputPassword @bind-Value="@context.Password" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <AntDesign.Button Type="@AntDesign.ButtonType.Primary" @onclick="Register" HtmlType="submit">
                Добавить
            </AntDesign.Button>
        </FormItem>
    </Form>
</div>


<hr />
<div style="margin-right: 150px;  margin-left: 150px">
    <h3>Список пользователей</h3>

    <Table TItem="User" DataSource="@users" Style="background-color: darkseagreen">
        <Column Title="Имя пользователя" @bind-Field="@context.Name">
            @context.Name
        </Column>
        <Column Title="Логин" @bind-Field="@context.Login">@context.Login</Column>
        <Column Title="Пароль" @bind-Field="@context.Password" Style="padding-left: 25px"><img src="https://img.icons8.com/material/24/000000/password--v1.png"/></Column>
        <ActionColumn Title=" ">
            <Space Size=@("middle")>
                <SpaceItem>
                    <a @onclick="() => DeleteAsync(context.Id)">Удалить</a>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
</div>

@code {
    bool loading = false;
    string[] messages = new string[] { };
    List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        users = await context.Users.ToListAsync();
    }

    private async Task DeleteAsync(int id)
    {
        using var context = DbFactory.CreateDbContext();
        if (context.Users.Count() == 1)
        {
            messages = new string[] { "Нельзя удалить последнего пользователя" };
            return;
        }
        var user = await context.Users.FirstOrDefaultAsync(x => x.Id == id);
        context.Users.Remove(user);
        await context.SaveChangesAsync();
        NavManager.NavigateTo("/cms/users", true);
    }

    RegisterVM reg = new();

    bool Validate()
    {
        List<string> problems = new List<string>();
        if (string.IsNullOrEmpty(reg.Login)) problems.Add(@"'Логин' должно быть заполнено");
        else if (reg.Login.Length > 50) problems.Add(@"'Логин' должно быть не более 50 символов");

        if (string.IsNullOrEmpty(reg.Password)) problems.Add(@"'Пароль' должно быть заполнено");

        if (!string.IsNullOrEmpty(reg.UserName) && reg.UserName.Length > 100)
            problems.Add(@"'Имя' должно быть не более 100 символов");

        messages = problems.ToArray();

        return !messages.Any();
    }

    public void Register()
    {
        if (!Validate()) return;
        ProducedAuthenticationStateProvider p = provider as ProducedAuthenticationStateProvider;
        var result = p.Register(reg.Login, reg.Password, reg.UserName);
        if (result == null)
        {
            using var context = DbFactory.CreateDbContext();
            users = context.Users.ToList();

            reg = new();
        }
        else
        {
            messages = new string[] { result };
        }

    }

    class RegisterVM
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string Login { get; set; }
    }

}
