@page "/cms/users"
@layout CmsLayout
@inject IDbContextFactory<TeacherContext> DbFactory
@inject NavigationManager NavManager
@inject AuthenticationStateProvider provider
@namespace TeacherWebSiteApp.Page.CMS.Users

<h3>Пользователи</h3>
<ValidationBlock Messages="messages" />

@*@<h4 style="margin-top:40px">Новый пользователь</h4>
    <div style="margin-left: 80px; margin-right: 580px">
        <div style="margin-bottom: 35px">
            <Input @bind-Value="reg.Name" Type="text" Placeholder="Имя">
        </div>
        <div style="margin-bottom: 35px">
            <Input @bind-Value="reg.UserName" Type="text" Placeholder="Логин">
        </div>
        <div style="margin-bottom: 35px">
            <Input @bind-Value="reg.Password" Type="password" Placeholder="Пароль">
        </div>
        <div style="margin-top: 25px">
            <Button Type="@AntDesign.ButtonType.Primary" @onclick="Register">
                Добавить
            </Button>
        </div>
    </div>*@

<MudBlazor.MudForm @bind-Errors="@messages">
    <MudBlazor.MudTextField T="string" Label="Username" @ref="reg.UserName" Required="true"  RequiredError="User name is required!" />
    <MudBlazor.MudTextField T="string" Label="Email" @ref="reg.Name" Required="true" RequiredError="Email is required!"/>
                  <ValidationBlock Messages="messages" />
    <MudBlazor.MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="reg.Password"
                  InputType="InputType.Password"
                  RequiredError="Password is required!" />
    <MudBlazor.MudTextField T="string"
                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"/>
    <div class="d-flex align-center justify-space-between mt-6">
        <MudBlazor.MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" @onclick="Register" Class="ml-auto">Добавить</MudBlazor.MudButton>
    </div>
</MudBlazor.MudForm>

<hr style="margin-top:40px; margin-bottom:40px; margin-right: 500px"/>

<h5>Список пользователей</h5>
@*<table class="table table-striped table-hover form-block">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Логин</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                int id = user.Id;

                <tr>
                    <td>@user.Name</td>
                    <td>@user.Username</td>
                    <td><a href="/cms/password/@id">Изменить пароль</a></td>
                    <td>
                        <a style="cursor:pointer; color:brown" @onclick="() => DeleteAsync(id)">Удалить</a>

                    </td>
                </tr>
             }
        </tbody>
    </table>*@

<MudSimpleTable Hover="@true" Bordered="@true" Striped="@true" Style="overflow-x: auto;">
    <thead>
        <tr>
            @foreach (var h in headings)
            {

                <th>@h</th> 
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            int id = user.Id;
            <tr>
                <td>@user.Name</td>
                <td>@user.Username</td>
                <td><a href="/cms/password/@id">Изменить пароль</a></td>
                <td>
                    <a style="cursor:pointer; color:brown" @onclick="() => DeleteAsync(id)">Удалить</a>

                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    string[] messages = new string[] { };
    string[] headings = { "ID", "Name", "Login", "Password" };
    List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        users = await context.Users.ToListAsync();
    }

    private async Task DeleteAsync(int id)
    {
        using var context = DbFactory.CreateDbContext();
        if (context.Users.Count() == 1)
        {
            messages = new string[] { "Нельзя удалить последнего пользователя" };
            return;
        }
        var user = await context.Users.FirstOrDefaultAsync(x => x.Id == id);
        context.Users.Remove(user);
        await context.SaveChangesAsync();
        NavManager.NavigateTo("/cms/users", true);
    }

    RegisterVM reg = new();

    bool Validate()
    {
        List<string> problems = new List<string>();
        if (string.IsNullOrEmpty(reg.UserName)) problems.Add(@"'Логин' должно быть заполнено");
        else if (reg.UserName.Length > 50) problems.Add(@"'Логин' должно быть не более 50 символов");

        if (string.IsNullOrEmpty(reg.Password)) problems.Add(@"'Пароль' должно быть заполнено");

        if (!string.IsNullOrEmpty(reg.Name) && reg.Name.Length > 100)
            problems.Add(@"'Имя' должно быть не более 100 символов");

        messages = problems.ToArray();

        return !messages.Any();
    }

    async Task Register()
    {
        if (!Validate()) return;
        var p = (ProducedAuthenticationStateProvider)provider;
        var result = p.Register(reg.UserName, reg.Password, reg.Name);
        if (result == null)
        {
            using var context = DbFactory.CreateDbContext();
            users = await context.Users.ToListAsync();
            reg = new();
        }
        else messages = new string[] { result };


    }

    class RegisterVM
    {
        public string Name { get; set; }
        public string Password { get; set; }
        public string UserName { get; set; }
    }
 }
